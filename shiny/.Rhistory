shiny::runApp()
shiny::runApp(mtcars)
install.packages("shinyjs")
shinyDB <- function(dataInput){
library(shinyjs)
library(shiny)
shiny::runApp()
shinyServer(function(input, output, session) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
}
shinyDB(mtcars)
shinyDB(mtcars)
shinyDB()
shinyDB <- function(){
library(shinyjs)
library(httr)
library(jsonlite)
library(shiny)
shiny::runApp()
shinyServer(function(input, output, session) {
output$DBupload <- renderUI({
actionButton("DBuploadButton", "Upload")
})
onclick("DBuploadButton", {
print("works")
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
}
shinyDB()
runApp()
shinyDB()
shinyDB <- function(){
library(shinyjs)
library(httr)
library(jsonlite)
library(shiny)
shiny::runApp()
shinyServer(function(input, output, session) {
#
# output$DBupload <- renderUI({
#   actionButton("DBuploadButton", "Upload")
# })
#
# onclick("DBuploadButton", {
#   print("works")
# })
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
}
shinyDB()
shinyDB <- function(){
shiny::runApp()
}
shinyDB()
shinyDB()
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
shinyDB <- function(dataInput){
shiny::runApp()
}
library(shinyjs)
library(httr)
library(jsonlite)
library(shiny)
shinyServer(function(input, output, session) {
#
# output$DBupload <- renderUI({
#   actionButton("DBuploadButton", "Upload")
# })
#
# onclick("DBuploadButton", {
#   print("works")
# })
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyDB()
plot(mtcars[1],mtcars[2])
plot(mtcars[[1]],mtcars[[2]])
shinyDB()
shinyDB <- function(dataInput){
shiny::runApp()
}
library(shinyjs)
library(httr)
library(jsonlite)
library(shiny)
shinyServer(function(input, output, session) {
output$DBupload <- renderUI({
actionButton("DBuploadButton", "Upload")
})
onclick("DBuploadButton", {
print("works")
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyDB()
shinyDB()
faithful
shinyDB(faithful)
runApp(quiet=TRUE)
# This is the server logic for a Shiny web application.
# You can find out more about building applications with Shiny here:
#
# http://shiny.rstudio.com
#
shinyDB <- function(dataInput){
shiny::runApp()
}
dataInput = mtcars
library(shinyjs)
library(httr)
library(jsonlite)
library(shiny)
shinyServer(function(input, output, session) {
output$DBupload <- renderUI({
actionButton("DBuploadButton", "Upload")
})
onclick("DBuploadButton", {
print("works")
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- dataInput[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
runApp(quiet=TRUE)
runApp(quiet=TRUE)
shinyServer(function(input, output, session) {
output$DBupload <- renderUI({
actionButton("DBuploadButton", "Upload")
})
onclick("DBuploadButton", {
print("works")
})
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- dataInput[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
output$link <- renderText({
1:5
})
})
runApp(quiet=TRUE)
runApp()
runApp()
shinyDB <- function(object, dataInput){
shiny::runApp()
}
runApp(dataInput = mtcars)
runApp("dataInput" = mtcars)
shinyDB <- function(object){
shiny::runApp()
}
shinyDB()
random(100)
rnd(100)
sample(1:100, 0.1)
sample(1:100, 1)
sys.time()
Sys.time()
Sys.date()
Sys.Date()
as.numeric(format(Sys.time(), "%OS3")) * 1000
print(as.numeric(Sys.time())*1000, digits=15)
Sys.time()
as.numeric(Sys.time())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
addToDB("dataInput" = dataInput)
addToDB <- function(...){
PUT(paste0(dbURL,path,".json"), body = toJSON(list(...)))
}
addToDB("dataInput" = dataInput)
dbURL <- "https://firedata-b0e54.firebaseio.com"
path <- paste0("/shinyTest/", as.numeric(Sys.time()))
addToDB("dataInput" = dataInput)
path
as.numeric(Sys.time())*100000
as.numeric(Sys.time())*10000
as.numeric(Sys.time())*1000
as.numeric(Sys.time())*100
path <- paste0("/shinyTest/", as.numeric(Sys.time())*100)
path
path <- paste0("/shinyTest/", as.numeric(Sys.time())*100000)
path
addToDB("dataInput" = dataInput)
shinyDB <- function(){
shiny::runApp()
}
shinyDB()
shinyDB()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
parseQueryString("?a=324923949")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = "324923849"
length(a)
nchar(a)
runApp()
runApp()
fromDB <- function(..., path, url){
entries <- list(...)
dataJSON = GET(paste0(url,path,".json"), content_type_json())
dataFrame = (fromJSON(content(dataJSON,"text")))
for(i in 1:length(entries)){
list2env(dataFrame[entries[[i]]], envir = .GlobalEnv)
}
}
dbURL <- "https://firedata-b0e54.firebaseio.com"
path="dbURL <- "149054439652151"
dbURL <- "149054439652151"
fromDB("dataInput", "path" = path, "url" = dbURL)
dbURL <- "https://firedata-b0e54.firebaseio.com/shinyTest/"
fromDB("dataInput", "path" = path, "url" = dbURL)
dataJSON = GET(paste0("https://firedata-b0e54.firebaseio.com","shinyTest/149054704265540",".json"), content_type_json())
dataJSON = GET(paste0("https://firedata-b0e54.firebaseio.com","/shinyTest/149054704265540",".json"), content_type_json())
runApp()
runApp()
a = parseQueryString("http://127.0.0.1:3547/?DBpath=49839458349")[['DBpath']]
a
a = parseQueryString("http://127.0.0.1:3547/?DBpath=49839458349")
a
a[1]
as.vector(a[1])
a[[1]]
runApp()
?parseQueryString
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?list2env
runApp()
runApp()
View(dataInput)
rm(dataInput)
runApp()
runApp()
runApp()
runApp()
View(dataInput)
parent.enn()
parent.env()
parent.env
parent.env(env)
runApp()
runApp()
runApp()
runApp()
View(dataInput)
rm(dataInput)
runApp()
runApp()
rm(dataInput)
runApp()
rm(dataInput)
runApp()
rm(dataInput)
runApp()
data.frame(c(1:4),c(4:8))
data.frame(c(1:4),c(4:7))
runApp()
runApp()
mtcars
typeof(mtcars)
typeof(USArrests)
as.list(data.frame(c(1:4),c(4:7)))
runApp()
a = as.list(data.frame(c(1:4),c(4:7)))
a
a[,1]
mtcars[,1]
UScitiesD
USJudgeRatings
runApp()
dataInput
dbURL <- "https://firedata-b0e54.firebaseio.com"
path <- paste0("/shinyTest/", "149056775170964")
fromDB("dataInput", "path" = path, "url" = dbURL)
fromDB <- function(..., path, url){
entries <- list(...)
dataJSON <- GET(paste0(url,path,".json"), content_type_json())
dataFrame <- (fromJSON(content(dataJSON,"text")))
#appending variables from firebase to shiny
for (i in 1:length(entries)) {
list2env(dataFrame[entries[[i]]], envir = .GlobalEnv)
}
}
dbURL <- "https://firedata-b0e54.firebaseio.com"
path <- paste0("/shinyTest/", "149056775170964")
fromDB("dataInput", "path" = path, "url" = dbURL)
USJudgeRatings
rm(dataInput)
dbURL <- "https://firedata-b0e54.firebaseio.com"
path <- paste0("/shinyTest/", "149056775170964")
fromDB("dataInput", "path" = path, "url" = dbURL)
is.equal(dataInput, USJudgeRatings)
USJudgeRatings == dataInput
USJudgeRatings - dataInput
a = toJSON(USJudgeRatings)
a
b = fromJSON(a)
USJudgeRatings - b
fromDB <- function(..., path, url){
entries <- list(...)
dataJSON <- GET(paste0(url,path,".json"))
dataFrame <- (fromJSON(content(dataJSON,"text")))
#appending variables from firebase to shiny
for (i in 1:length(entries)) {
list2env(dataFrame[entries[[i]]], envir = .GlobalEnv)
}
}
addToDB <- function(..., path){
PUT(paste0(dbURL,"/",paste0(path),".json"), body = toJSON(list(...)))
}
rm(dataInput)
#addToDB(addToDB("dataInput" = dataInput, "path" = concPath))
path <- as.numeric(Sys.time())*100000
concPath <- paste0("/shinyTest/", path)
addToDB(addToDB("dataInput" = USJudgeRatings, "path" = concPath))
addToDB("dataInput" = USJudgeRatings, "path" = concPath)
dbURL <- "https://firedata-b0e54.firebaseio.com"
path <- paste0("/shinyTest/", "149056775170964")
fromDB("dataInput", "path" = path, "url" = dbURL)
View(dataInput)
View(b)
a
fromJSON(a)
